<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	
	<!-- proxy(대행자)를 자동으로 생성하여 Annotation을 통해 작성한 AOP를 실행하겠다는 의미 -->
	<aop:aspectj-autoproxy />

	<!-- 
		공통 기능이 작성된 Bean(Class) 파일
		* XML, Annotation 모두 아래와 같이 Bean이 등록되어 있어야 함
	 -->
	<bean id="logAop" class="kr.study.dev_mook.aop.xml.LogAop" />
	<bean id="logAop2" class="kr.study.dev_mook.aop.annotation.LogAop_2" />
	
	<aop:config>
		<aop:aspect id="logger" ref="logAop">
			<!-- 
				publicM이라는 ID를 가진 Pointcut 생성
				within은 AOP가 적용되는 범위(대상); kr.study.dev_mook.model 패키지 밑에 있는 모든 Class가 실행될 때마다 AOP 수행
				* 내가 어느 시점에 공통 코드를 수행시킬 것인지 설정하는 것, 그것이 관점 지향 프로그래밍임.
			 -->
			<aop:pointcut id="publicM" expression="within(kr.study.dev_mook.model.*)" />
			<!-- 
				AOP의 Advice 종류는 Around 타입이고, publicM이라는 ID를 가진 Pointcut을 참조하며,
				Pointcut의 expression에 해당하는 Class가 실행될 때 AOP Bean에 작성한 loggerAop라는 메소드를 실행
				* Advice 종류 : before, after-returning, after-throwing, after, around
			 -->
			<aop:around pointcut-ref="publicM" method="loggerAop"/>
		</aop:aspect>
	</aop:config>
	
	<bean id="student" class="kr.study.dev_mook.model.Student">
		<property name="name" value="홍길동" />
		<property name="age" value="11" />
		<property name="gradeNumber" value="3" />
		<property name="classNumber" value="5" />
	</bean>
	
	<bean id="worker" class="kr.study.dev_mook.model.Worker">
		<property name="name" value="한국인" />
		<property name="age" value="20" />
		<property name="job" value="개발자" />
	</bean>
	
</beans>
